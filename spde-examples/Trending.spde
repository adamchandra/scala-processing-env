import dispatch._
import dispatch.liftjson.Js._
import net.liftweb.json.JsonAST._

size(800, 800)
frameRate(5)
smooth()

val h = new Http with Threads
val trending = :/("search.twitter.com") / "trends" / "current.json"

val trends = h(trending ># { js =>
  (for (JString(query) <- js \\ "query") yield query.replaceAll("[#\"]", "")) take 12
})
def photoFeed(tag: String) = :/("api.flickr.com") / "services" / "feeds" / "photos_public.gne" <<? Map(
  "format" -> "json", "tags" -> tag, "nojsoncallback" -> 1
)
val rows = trends.map { t =>
  h.future( photoFeed(t) ># { js =>
    (for (JString(url) <- js \\ "m") yield url) take 10 map { url => future { loadImage(url) } }
  } )
}

def draw() {
  val availRows = available(rows) map { available(_) } filter { !_.isEmpty }
  if (!availRows.isEmpty) {
    if (isMousePressed) {
      val row = availRows(mouseY * availRows.length / height)
      val photo = row(mouseX * row.length / height)
      image(photo, 0, 0, width, height)
    } else {
      val photoHeight = height / availRows.length
      for ((availPhotos, y) <- availRows.zipWithIndex) {
        val photoWidth = width / availPhotos.length
        for ((photo, x) <- availPhotos.zipWithIndex) {
          image(photo, x*photoWidth, y*photoHeight, photoWidth, photoHeight)
        }
      }
    }
  }
}